print("Y converted to vector!")
}
source("~/Documents/Research/R_packages/fabPrediction/R/predictionFunctions.R", echo=TRUE)
y
fab.region = fab_prediction(y,
mu = 0.5, tau2 = 1,
epsilon = 0.15)
fab.region
unname(y)
y
Y
unname(Y)
source("~/Documents/Research/R_packages/fabPrediction/R/predictionFunctions.R", echo=TRUE)
fab.region = fab_prediction(y,
mu = 0.5, tau2 = 1,
epsilon = 0.15)
fab.region
Y
y
Y=y
!is.vector(Y)
Y = unlist(as.vector(Y))
Y
unname(Y)
source("~/Documents/Research/R_packages/fabPrediction/R/predictionFunctions.R", echo=TRUE)
fab.region = fab_prediction(y,
mu = 0.5, tau2 = 1,
epsilon = 0.15)
fab.region
plot(y, type = 'o', pch = '|', ylab = '')
plot(y, pch = '|', ylab = '')
plot(y, type = 'o', pch = '|', ylab = '')
plot(y, linetype = 'o', pch = '|', ylab = '')
plot(y, ty[e] = 'o', pch = '|', ylab = '')
plot(y, type = 'o', pch = '|', ylab = '')
plot(y, type = 'b', pch = '|', ylab = '')
plot(y, type = 'o', pch = '|', ylab = '')
?plotlibrary()
library(lattice)
stripplot(y)
stripplot(y$radon)
plot(y, type = 'o', pch = '|', ylab = '', xlab = "log(Radon)")
plot(y, type = 'o', pch = '|', ylab = '', xlab = "log(Radon)")
lines(fab.region, type = 'o', pch = '|', ylab = '', xlab = "log(Radon)")
plot(y, type = 'o', pch = '|', ylab = '', xlab = "log(Radon)")
lines(fab.region, type = 'o', pch = '|', ylab = '', xlab = "log(Radon)")
y
fab.region
plot(y, type = 'o', pch = '|', ylab = '', xlab = "log(Radon)")
y
plot(fab.region, type = 'o', pch = '|', ylab = '', xlab = "log(Radon)")
fab.region
y
plot(hist(y))
plot(hist(y$radon))
abline(h = fab.region)
plot(hist(y$radon))
abline(h = fab.region)
stripchart(fab.region)
?stripchart
x <- stats::rnorm(50)
xr <- round(x, 1)
stripchart(x) ; m <- mean(par("usr")[1:2])
text(m, 1.04, "stripchart(x, \"overplot\")")
stripchart(xr, method = "stack", add = TRUE, at = 1.2)
text(m, 1.35, "stripchart(round(x,1), \"stack\")")
stripchart(xr, method = "jitter", add = TRUE, at = 0.7)
text(m, 0.85, "stripchart(round(x,1), \"jitter\")")
stripchart(decrease ~ treatment,
main = "stripchart(OrchardSprays)",
vertical = TRUE, log = "y", data = OrchardSprays)
stripchart(decrease ~ treatment, at = c(1:8)^2,
main = "stripchart(OrchardSprays)",
vertical = TRUE, log = "y", data = OrchardSprays)
[Package graphics version 4.2.2 Index]
stripchart(fab.regionm,type="l")
stripchart(fab.region,type="l")
stripchart(fab.region,type="l",col="red")
stripchart(fab.region,type="l",col="red",pch="|")
stripchart(fab.region,type="l",col="red",cex=2)
stripchart(fab.region,type="l",col="red",cex=5)
stripchart(fab.region,type="l",col="red",cex=50)
stripchart(fab.region,type="l",col="red")
stripchart(y$radon,pch="|")
range(y$radon)
stripchart(y$radon,pch="|",xlim = c(-0.1,2))
stripchart(fab.region,type="l",col="red")
fab.region
stripchart(y$radon,pch="|",xlim = c(-1,3))
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3))
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3))
stripchart(fab.region,type="l",col="red")
?stripchart
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),method="overplot")
devtools::install_github("betsybersson/fabPrediction")
library(devtools)
install.packages("devtools")
source("~/.active-rstudio-document", echo=TRUE)
setwd("~/Documents/Research/multiple_shrinkage/final_rep_code")
source("~/.active-rstudio-document", echo=TRUE)
#stop cluster
stopCluster(cl)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# save output
final.out[g.ind,p1.ind,n.ind] = new.parallel.out
final.out
final.out[,,1]
final.out[1,,1]
dim(finla.out)
dim(final.out)
dim(final.out[1,1,1])
dim(final.out[1,1,])
dim(final.out[1,1,])
final.out[1,1]
final.out[1,1,]
dim(final.out[1,1,])
dim(final.out[1,1,][1])
class(final.out[1,1,])
big.table = list()
index = 1
for (n.ind in 1:length(Ns)){
for (g.ind in 1:length(gs)){
for (p.ind in 1:length(ps)){
temp = c()
for ( j in 1 ){
temp.out = file.out[g.ind,p.ind,n.ind][[1]]
loss.j = temp.out[[j]]
temp = cbind(temp,colMeans(loss.j))
}
colnames(temp) = error.names
rownames(temp) = colnames(loss.j)
big.table[[index]] = temp
names(big.table)[[index]] = paste0("N",Ns[n.ind],"g",gs[g.ind],"p",ps[p.ind])
index = index + 1
}
}
}
ps
big.table = list()
index = 1
for (n.ind in 1:length(Ns)){
for (g.ind in 1:length(gs)){
for (p.ind in 1:length(p1s)){
temp = c()
for ( j in 1 ){
temp.out = file.out[g.ind,p.ind,n.ind][[1]]
loss.j = temp.out[[j]]
temp = cbind(temp,colMeans(loss.j))
}
colnames(temp) = error.names
rownames(temp) = colnames(loss.j)
big.table[[index]] = temp
names(big.table)[[index]] = paste0("N",Ns[n.ind],"g",gs[g.ind],"p",ps[p.ind])
index = index + 1
}
}
}
file.out = final.out
big.table = list()
index = 1
for (n.ind in 1:length(Ns)){
for (g.ind in 1:length(gs)){
for (p.ind in 1:length(p1s)){
temp = c()
for ( j in 1 ){
temp.out = file.out[g.ind,p.ind,n.ind][[1]]
loss.j = temp.out[[j]]
temp = cbind(temp,colMeans(loss.j))
}
colnames(temp) = error.names
rownames(temp) = colnames(loss.j)
big.table[[index]] = temp
names(big.table)[[index]] = paste0("N",Ns[n.ind],"g",gs[g.ind],"p",ps[p.ind])
index = index + 1
}
}
}
error.names
big.table = list()
index = 1
for (n.ind in 1:length(Ns)){
for (g.ind in 1:length(gs)){
for (p.ind in 1:length(p1s)){
temp = c()
for ( j in 1 ){
temp.out = file.out[g.ind,p.ind,n.ind][[1]]
loss.j = temp.out[[j]]
temp = cbind(temp,colMeans(loss.j))
}
colnames(temp) = "Stein"
rownames(temp) = colnames(loss.j)
big.table[[index]] = temp
names(big.table)[[index]] = paste0("N",Ns[n.ind],"g",gs[g.ind],"p",ps[p.ind])
index = index + 1
}
}
}
file.out = final.out
big.table = list()
index = 1
for (n.ind in 1:length(Ns)){
for (g.ind in 1:length(gs)){
for (p.ind in 1:length(p1s)){
temp = c()
for ( j in 1 ){
temp.out = file.out[g.ind,p.ind,n.ind][[1]]
loss.j = temp.out[[j]]
temp = cbind(temp,colMeans(loss.j))
}
colnames(temp) = "Stein"
rownames(temp) = colnames(loss.j)
big.table[[index]] = temp
names(big.table)[[index]] = paste0("N",Ns[n.ind],"g",gs[g.ind],"p",p1s[p.ind])
index = index + 1
}
}
}
big.table
unlist(big.table)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
Y.list
source("~/.active-rstudio-document", echo=TRUE)
warnings()
stopCluster(cl)
unlist(big.table)
source("~/.active-rstudio-document", echo=TRUE)
loss
source("~/.active-rstudio-document", echo=TRUE)
output
loss
stopCluster(cl)
source("~/.active-rstudio-document", echo=TRUE)
output
mean(unlist(output))
source("~/.active-rstudio-document", echo=TRUE)
warnings
warnings()
stopCluster(cl)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
standard.mle
standard.mle = lapply(Y.list,cov.function())
standard.mle = lapply(Y.list,cov.func())
Y.list
standard.mle = lapply(Y.list,cov.func
mle = list.to.3d.array(standard.mle)
source("~/.active-rstudio-document", echo=TRUE)
standard.mle = lapply(Y.list,cov.func)
standard.mle
#######################
## heterogeneous - standard MLE
standard.mle = tapply(seq_len(sum(ns)),group,function(KK)
cov.func(Y.matrix[KK,]))
standard.mle2 = lapply(Y.list,cov.func)
sum(standard.mle!=standard.mle2)
#######################
## heterogeneous - standard MLE
standard.mle = tapply(seq_len(sum(ns)),group,function(KK)
cov.func(Y.matrix[KK,]))
class(standard.mle)
mle = list.to.3d.array(standard.mle)
class(mle)
mle
sum(mle!=standard.mle)
dim(mle)
dim(standard.mle)
#######################
## heterogeneous - standard MLE
standard.mle = tapply(seq_len(sum(ns)),group,function(KK)
cov.func(Y.matrix[KK,]))
dim(standard.mle)
standard.mle[1]
standard.mle2 = lapply(Y.list,cov.func)
mle = list.to.3d.array(standard.mle)
dim(mle)
source("~/.active-rstudio-document", echo=TRUE)
devtools::install_github("betsybersson/fabPrediction")
library(fabPrediction)
source("../R/predictionFunctions.R")
fab.region = fab_prediction(y,
mu = 0.5, tau2 = 1,
epsilon = 0.15)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dplyr)
library(devtools)
data(radon,package="fabCI")
radon = as.data.frame(radon)
y = radon %>%
filter(county == "9") %>%
select(radon)
library(fabPrediction)
source("../R/predictionFunctions.R") ### delete this line upon deployment!
fab.region = fab_prediction(y,
mu = 0.5, tau2 = 1,
epsilon = 0.15)
fab.region
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),method="overplot")
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),method="overplot")
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",add=T)
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(fab.region,.1,labels=fab.region)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(fab.region,.1,labels=fab.region)
stripchart(c(-1,3),type="l")
text(fab.region,.1,labels=fab.region)
fab.region
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(fab.region,c(1.1,1.1),labels=fab.region)
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(fab.region,c(1.1,1.1),labels=round(fab.region,2))
text(fab.region,c(1.1,1.1),labels=round(fab.region,2),col="red")
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(fab.region,c(1.1,1.1),labels=round(fab.region,2),col="red")
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(fab.region,c(.3,.3),labels=round(fab.region,2),col="red")
text(fab.region,c(.7,.7),labels=round(fab.region,2),col="red")
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(fab.region,c(.7,.7),labels=round(fab.region,2),col="red")
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(fab.region,c(1.05,1.05),labels=round(fab.region,2),col="red")
source("~/Documents/Research/R_packages/fabPrediction/R/predictionFunctions.R", echo=TRUE)
fab.region = fab_prediction(y,
mu = 0.5, tau2 = 1,
epsilon = 0.15)
fab.region
class(fab.region)
fab.region[1]
plot.pred = function(obj){
stripchart(c(-1,3),type="l")
stripchart(y$radon,pch="|",xlim = c(-1,3),add=T)
stripchart(fab.region,type="l",col="red",lwd=3,add=T)
text(obj,c(1.05,1.05),labels=round(obj,2),col="red")
}
plot(fab.region)
source("~/Documents/Research/R_packages/fabPrediction/R/predictionFunctions.R", echo=TRUE)
source("~/Documents/Research/R_packages/fabPrediction/R/predictionFunctions.R", echo=TRUE)
fab.region = fab_prediction(y,
mu = 0.5, tau2 = 1,
epsilon = 0.15)
fab.region$bounds
plot.pred = function(obj){
stripchart(c(-1,3),type="l")
stripchart(obj$Y,pch="|",xlim = c(-1,3),add=T)
stripchart(obj$bounds,type="l",col="red",lwd=3,add=T)
text(obj$bounds,c(1.05,1.05),labels=round(obj$bounds,2),col="red")
}
plot(fab.region)
fab.region
plot(fab.region)
obj=fab.region
stripchart(c(-1,3),type="l")
stripchart(obj$Y,pch="|",xlim = c(-1,3),add=T)
obj
plot.pred = function(obj){
stripchart(c(-1,3),type="l")
stripchart(obj$data,pch="|",xlim = c(-1,3),add=T)
stripchart(obj$bounds,type="l",col="red",lwd=3,add=T)
text(obj$bounds,c(1.05,1.05),labels=round(obj$bounds,2),col="red")
}
plot(fab.region)
plot.range = range(range(obj$data),obj$bounds)
plot.range
range(obj$data)
obj$bounds
range(obj$data,obj$bound)
plot.range
diff(plot.range)
diff(c(-.5,-.3))
diff(plot.range)
plot.range = range(obj$data,obj$bound)
plot.range = plot.range + diff(plot.range)/20*c(-1,1)
plot.range = range(obj$data,obj$bound)
plot.range
plot.range = plot.range + diff(plot.range)/20*c(-1,1)
plot.range
plot.pred = function(obj){
plot.range = range(obj$data,obj$bound)
plot.range = plot.range + diff(plot.range)/20*c(-1,1)
stripchart(c(-1,3),type="l")
stripchart(obj$data,pch="|",xlim = c(-1,3),add=T)
stripchart(obj$bounds,type="l",col="red",lwd=3,add=T)
text(obj$bounds,c(1.05,1.05),labels=round(obj$bounds,2),col="red")
}
plot(fab.region)
b
b
plot.pred = function(obj){
plot.range = range(obj$data,obj$bound)
plot.range = plot.range + diff(plot.range)/30*c(-1,1)
stripchart(c(-1,3),type="l")
stripchart(obj$data,pch="|",xlim = c(-1,3),add=T)
stripchart(obj$bounds,type="l",col="red",lwd=3,add=T)
text(obj$bounds,c(1.05,1.05),labels=round(obj$bounds,2),col="red")
}
plot(fab.region)
diff(plot.range)/30
c(-1,1)
diff(plot.range)/30*c(-1,1)
plot.range
plot.range + diff(plot.range)/30*c(-1,1)
-0.34578-0.08993
plot.pred = function(obj){
plot.range = range(obj$data,obj$bound)
plot.range = plot.range + diff(plot.range)/40*c(-1,1)
stripchart(c(-1,3),type="l")
stripchart(obj$data,pch="|",xlim = c(-1,3),add=T)
stripchart(obj$bounds,type="l",col="red",lwd=3,add=T)
text(obj$bounds,c(1.05,1.05),labels=round(obj$bounds,2),col="red")
}
plot(fab.region)
plot.pred = function(obj){
plot.range = range(obj$data,obj$bound)
plot.range = plot.range + diff(plot.range)/20*c(-1,1)
stripchart(c(-1,3),type="l")
stripchart(obj$data,pch="|",xlim = plot.range,add=T)
stripchart(obj$bounds,type="l",col="red",lwd=3,add=T)
text(obj$bounds,c(1.05,1.05),labels=round(obj$bounds,2),col="red")
}
plot(fab.region)
plot.pred = function(obj){
plot.range = range(obj$data,obj$bound)
plot.range = plot.range + diff(plot.range)/40*c(-1,1)
stripchart(c(-1,3),type="l")
stripchart(obj$data,pch="|",xlim = plot.range,add=T)
stripchart(obj$bounds,type="l",col="red",lwd=3,add=T)
text(obj$bounds,c(1.05,1.05),labels=round(obj$bounds,2),col="red")
}
plot(fab.region)
plot.pred = function(obj){
plot.range = range(obj$data,obj$bound)
plot.range = plot.range + diff(plot.range)/20*c(-1,1)
stripchart(plot.range,type="l")
stripchart(obj$data,pch="|",add=T)
stripchart(obj$bounds,type="l",col="red",lwd=3,add=T)
text(obj$bounds,c(1.05,1.05),labels=round(obj$bounds,2),col="red")
}
plot(fab.region)
setwd("~/Documents/Research/R_packages/fabPrediction/vignettes")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dplyr)
library(devtools)
data(radon,package="fabCI")
radon = as.data.frame(radon)
y = radon %>%
filter(county == "9") %>%
select(radon)
# library(fabPrediction)
source("../R/predictionFunctions.R") ### delete this line upon deployment!
source("../R/helperFunctions") ### delete this line upon deployment!
# library(fabPrediction)
source("../R/predictionFunctions.R") ### delete this line upon deployment!
plot(fab.region,main="FAB")
dta_prediction(y,epsilon=.15)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(dplyr)
library(devtools)
data(radon,package="fabCI")
radon = as.data.frame(radon)
y = radon %>%
filter(county == "9") %>%
select(radon)
# library(fabPrediction)
source("../R/predictionFunctions.R") ### delete this line upon deployment!
source("../R/helperFunctions.R") ### delete this line upon deployment!
fab.region = fab_prediction(y,
mu = 0.5, tau2 = 1,
epsilon = 0.15)
fab.region$bounds
plot(fab.region,main="FAB",xlab="log(radon)")
plot(dta_prediction(y,epsilon=.15),main="DTA",xlab="log(radon)")
dta_prediction(y,epsilon=.15)
y
